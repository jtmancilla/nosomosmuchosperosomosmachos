length(game)
game
serie <- function(){
game = sample(players, size = 1, replace = TRUE, prob = c(0.4, 0.6))
while( 2 > abs(sum (game == "A") - sum(game == "B")) ){
if(runif(1) < 0.4){
game <- c(game, "A")
}
else{
game <- c(game, "B")
}
}
length(game)
}
serie()
serie()
serie()
juegos <- rdply(2000, serie())
head(juegos)
sum(juegos$V1 == 4)
n = 2000
juegos <- rdply(n, serie())
sum(juegos$V1 == 4) / n
n = 10000
juegos <- rdply(n, serie())
sum(juegos$V1 == 4) / n
n = 5000
juegos <- rdply(n, serie())
sum(juegos$V1 == 4) / n
n = 10000
juegos <- rdply(n, serie())
prob  <- sum(juegos$V1 == 4) / n
prob
players = c("A", "B")
serie <- function(){
game = sample(players, size = 1, replace = TRUE, prob = c(0.4, 0.6))
while( 2 > abs(sum (game == "A") - sum(game == "B")) ){
if(runif(1) < 0.4){
game <- c(game, "A")
}
else{
game <- c(game, "B")
}
}
length(game)
}
serie()
n = 10000
juegos <- rdply(n, serie())
prob  <- sum(juegos$V1 == 4) / n
prob
juegos <- rdply(n, serie())
prob  <- sum(juegos$V1 == 4) / n
prob
juegos <- rdply(n, serie())
prob  <- sum(juegos$V1 == 4) / n
prob
players = c("A", "B")
serie <- function(){
game = sample(players, size = 1, replace = TRUE, prob = c(0.4, 0.6))
while( 2 > abs(sum (game == "A") - sum(game == "B")) ){
if(runif(1) < 0.4){
game <- c(game, "A")
}
else{
game <- c(game, "B")
}
}
if (sum (game == "A") - sum(game == "B") > 0){
resultado  <- 1
}
else {
resultado  <- 0
}
resultado
}
serie()
serie()
serie()
serie()
n = 10000
juegos <- rdply(n, serie())
prob  <- sum(juegos$V1 == 1) / n
prob
head(juegos)
juegos <- rdply(n, serie())
prob  <- sum(juegos$V1 == 1) / n
prob
juegos <- rdply(n, serie())
prob  <- sum(juegos$V1 == 1) / n
prob
rdply(3,juegos)
n = 1000
juegos <- rdply(n, serie())
prueba  <- rdply(3,juegos)
head(prueba)
prueba  <- rdply(3,rdply(n, serie()))
head(prueba)
tail(prueba)
length(juegos)
nrow(juegos)
df  <-  data.frame(sim = 1:nrow(juegos), juegos)
head(df)
df  <-  data.frame(sim = 1, juegos)
head(df)
tail(df)
df  <-  data.frame(sim = 1, rdply(n, serie()))
tail(df)
df  <-  data.frame(sim = 1, rdply(n, serie()))
df2  <- data.frame(sim = 2, rdply(n, serie()))
df3  <-  data.frame(sim = 3, rdply(n, serie()))
data  <- rbind(df,df2,df3)
tail(data)
ggplot(data, aes(x = log(.n), y = V1,
color = factor(sim))) +
geom_hline(yintercept = 0.3, color = "darkgray") +
geom_line() +
scale_x_continuous("juegos", labels = exp,
breaks = log(1 * sapply(1:10, function(i) 2 ^ i))) +
geom_text(data = filter(data, .n == 1000),
aes(label = round(frecuencia_relativa, 2)), y = c(0.5, 0.46, 0.54),
size = 3, hjust = 0)
library(ggplot2)
library(ggplot)
library(ggplot2)
ggplot(data, aes(x = log(.n), y = V1,
color = factor(sim))) +
geom_hline(yintercept = 0.3, color = "darkgray") +
geom_line() +
scale_x_continuous("juegos", labels = exp,
breaks = log(1 * sapply(1:10, function(i) 2 ^ i))) +
geom_text(data = filter(data, .n == 1000),
aes(label = round(frecuencia_relativa, 2)), y = c(0.5, 0.46, 0.54),
size = 3, hjust = 0)
ggplot(data, aes(x = log(.n), y = V1,
color = factor(sim))) +
geom_hline(yintercept = 0.3, color = "darkgray") +
geom_line() +
scale_x_continuous("juegos", labels = exp,
breaks = log(1 * sapply(1:10, function(i) 2 ^ i))) +
geom_text(data = filter(data, .n == 1000),
aes(label = round(V1, 2)), y = c(0.5, 0.46, 0.54),
size = 3, hjust = 0)
ggplot(data, aes(x = log(.n), y = V1,
color = factor(sim)))
ggplot(data, aes(x = log(.n), y = V1,
color = factor(sim))) +
geom_line()
ggplot(data, aes(x = .n, y = V1,
color = factor(sim))) +
geom_line()
juegos <- rdply(n, serie())
prob  <- sum(juegos$V1 == 1) / n
prob
juegos <- rdply(n, serie())
prob  <- sum(juegos$V1 == 1) / n
prob
n = 10000
juegos <- rdply(n, serie())
prob  <- sum(juegos$V1 == 1) / n
prob
n = 10000
juegos <- rdply(n, serie())
prob  <- sum(juegos$V1 == 1) / n
prob
n = 10000
juegos <- rdply(n, serie())
prob  <- sum(juegos$V1 == 1) / n
prob
n = 10000
juegos <- rdply(n, serie())
prob  <- sum(juegos$V1 == 1) / n
prob
n = 2000
juegos <- rdply(n, serie())
frec_rel  <- cumsum(juegos$V1 == 1) / 1:n
head(frec_rel)
df  <-  data.frame(sim = 1, frec_rel)
head(df)
set.seed(11)
n = 2000
juegos1 <- rdply(n, serie())
frec_rel_1  <- cumsum(juegos$V1 == 1) / 1:n
set.seed(12)
n = 2000
juegos_2 <- rdply(n, serie())
frec_rel_2  <- cumsum(juegos$V1 == 1) / 1:n
set.seed(13)
n = 2000
juegos_3 <- rdply(n, serie())
frec_rel_3  <- cumsum(juegos$V1 == 1) / 1:n
df  <-  data.frame(sim = 1, frec_rel_1)
df2  <- data.frame(sim = 2, frec_rel_2)
df3  <-  data.frame(sim = 3, frec_rel_3)
data  <- rbind(df,df2,df3)
set.seed(11)
n = 2000
juegos1 <- rdply(n, serie())
frec_rel_1  <- cumsum(juegos1$V1 == 1) / 1:n
set.seed(12)
n = 2000
juegos2 <- rdply(n, serie())
frec_rel_2  <- cumsum(juegos2$V1 == 1) / 1:n
set.seed(13)
n = 2000
juegos3 <- rdply(n, serie())
frec_rel_3  <- cumsum(juegos3$V1 == 1) / 1:n
df  <-  data.frame(sim = 1, frec_rel_1)
df2  <- data.frame(sim = 2, frec_rel_2)
df3  <-  data.frame(sim = 3, frec_rel_3)
data  <- rbind(df,df2,df3)
set.seed(11)
n = 2000
juegos1 <- rdply(n, serie())
frec_rel_1  <- cumsum(juegos1$V1 == 1) / 1:n
set.seed(12)
n = 2000
juegos2 <- rdply(n, serie())
frec_rel_2  <- cumsum(juegos2$V1 == 1) / 1:n
set.seed(13)
n = 2000
juegos3 <- rdply(n, serie())
frec_rel_3  <- cumsum(juegos3$V1 == 1) / 1:n
df  <-  data.frame(sim = 1, frec_rel_1)
df2  <- data.frame(sim = 2, frec_rel_2)
df3  <-  data.frame(sim = 3, frec_rel_3)
data  <- rbind(df,df2,df3)
head(df)
df  <-  data.frame(sim = 1, frec = frec_rel_1)
df2  <- data.frame(sim = 2, frec = frec_rel_2)
df3  <-  data.frame(sim = 3, frec = frec_rel_3)
data  <- rbind(df,df2,df3)
head(df)
head(data)
tail(data)
head(frec_rel_3)
set.seed(11)
n = 2000
juegos1 <- rdply(n, serie())
frec_rel_1  <- data.frame(juego = 1:n,cumsum(juegos1$V1 == 1) / 1:n)
set.seed(12)
n = 2000
juegos2 <- rdply(n, serie())
frec_rel_2  <- data.frame(juego = 1:n,cumsum(juegos2$V1 == 1) / 1:n)
set.seed(13)
n = 2000
juegos3 <- rdply(n, serie())
frec_rel_3  <- data.frame(juego = 1:n,cumsum(juegos3$V1 == 1) / 1:n)
head(frec_rel_3)
set.seed(11)
n = 2000
juegos1 <- rdply(n, serie())
frec_rel_1  <- data.frame(juego = 1:n, frec = cumsum(juegos1$V1 == 1) / 1:n)
set.seed(12)
n = 2000
juegos2 <- rdply(n, serie())
frec_rel_2  <- data.frame(juego = 1:n,frec = cumsum(juegos2$V1 == 1) / 1:n)
set.seed(13)
n = 2000
juegos3 <- rdply(n, serie())
frec_rel_3  <- data.frame(juego = 1:n,frec = cumsum(juegos3$V1 == 1) / 1:n)
head(frec_rel_3)
df  <-  data.frame(sim = 1, frec_rel_1)
df2  <- data.frame(sim = 2, frec_rel_2)
df3  <-  data.frame(sim = 3,frec_rel_3)
data  <- rbind(df,df2,df3)
tail(data)
ggplot(data, aes(x = log(juego), y = frec,
color = factor(sim))) +
geom_line() +
ggplot(data, aes(x = log(juego), y = frec,
color = factor(sim))) +
geom_line()
ggplot(data, aes(x = log(juego), y = frec,
color = factor(sim))) +
geom_line()
sum(juegos1$V1 == 1) / n
sum(juegos2$V1 == 1) / n
sum(juegos3$V1 == 1) / n
ggplot(data, aes(x = log(juego), y = frec,
color = factor(sim))) +
geom_hline(yintercept = 0.3, color = "darkgray")
geom_line() +
scale_x_continuous("juegos", labels = exp,
breaks = log(1 * sapply(1:10, function(i) 2 ^ i))) +
geom_text(data = filter(data, juego == 1000),
aes(label = round(frec, 2)), y = c(0.3075, 0.3145, 0.2865),
size = 3, hjust = 0)
ggplot(data, aes(x = log(juego), y = frec,
color = factor(sim))) +
geom_hline(yintercept = 0.3, color = "darkgray")
geom_line()  +
geom_text(data = filter(data, juego == 1000),
aes(label = round(frec, 2)), y = c(0.3075, 0.3145, 0.2865),
size = 3, hjust = 0)
ggplot(data, aes(x = log(juego), y = frec,
color = factor(sim))) +
geom_hline(yintercept = 0.3, color = "darkgray") +
geom_line()  +
geom_text(data = filter(data, juego == 1000),
aes(label = round(frec, 2)), y = c(0.3075, 0.3145, 0.2865),
size = 3, hjust = 0)
ggplot(data, aes(x = log(juego), y = frec,
color = factor(sim))) +
geom_hline(yintercept = 0.3, color = "darkgray") +
geom_line()  +
scale_x_continuous("Juegos", labels = exp,
breaks = log(1 * sapply(1:10, function(i) 2 ^ i))) +
geom_text(data = filter(data, juego == 1000),
aes(label = round(frec, 2)), y = c(0.3075, 0.3145, 0.2865),
size = 3, hjust = 0)
ggplot(data, aes(x = log(juego), y = frec,
color = factor(sim))) +
geom_hline(yintercept = 0.3, color = "darkgray") +
geom_line()  +
scale_x_continuous("Juegos", labels = exp,
breaks = log(1 * sapply(1:10, function(i) 2 ^ i))) +
geom_text(data = filter(data, juego == 2000),
aes(label = round(frec, 2)), y = c(0.3075, 0.3145, 0.2865),
size = 3, hjust = 0)
ggplot(data, aes(x = log(juego), y = frec,
color = factor(sim))) +
geom_hline(yintercept = 0.3, color = "darkgray") +
geom_line()  +
scale_x_continuous("Juegos", labels = exp,
breaks = log(1 * sapply(1:10, function(i) 2 ^ i))) +
geom_text(data = filter(data, juego == 2000),
aes(label = round(frec, 3)), y = c(0.3075, 0.3145, 0.2865),
size = 4, hjust = 0)
ggplot(data, aes(x = log(juego), y = frec,
color = factor(sim))) +
geom_hline(yintercept = 0.3, color = "darkgray") +
geom_line()  +
scale_x_continuous("Juegos", labels = exp,
breaks = log(1 * sapply(1:10, function(i) 2 ^ i))) +
geom_text(data = filter(data, juego == 2000),
aes(label = round(frec, 2)), y = c(0.3075, 0.3145, 0.2865),
size = 3, hjust = 0)
set.seed(221285)
x <- rnorm(10)
bootSim <- function(){
x_boot <- sample(x, size = 10, replace = TRUE)
exp(mean(x_boot))
}
boot_sim <- rdply(6000, bootSim)
library(dplyr)
library(ggplot2)
boot_sim <- rdply(6000, bootSim)
library(plyr)
boot_sim <- rdply(6000, bootSim)
round(qnorm(p = c(0.05, 0.95), mean = x, sd = sd(boot_sim$V1)), 2)
round(quantile(boot_sim$V1, prob = 0.05), 2)
round(quantile(boot_sim$V1, prob = 0.95), 2)
round(qnorm(p = c(0.05, 0.95), mean = mean(x), sd = sd(boot_sim$V1)), 2)
round(quantile(boot_sim$V1, probs = c(0.05,0.95)), 2)
round(qnorm(p = c(0.05, 0.95), mean = exp(mean(x)), sd = sd(boot_sim$V1)), 2)
round(exp(mean(x)) - 1.65 * sd(boot_sim$V1), 2)
round(exp(mean(x)) + 1.65 * sd(boot_sim$V1), 2)
round(quantile(boot_sim$V1, probs = c(0.05,0.95)), 2)
bcanon(x = x, nboot = 6000, theta = mean(x))
library(bootstrap)
library(boot)
bcanon(x = x, nboot = 6000, theta = mean(x))
bcanon(x = x, nboot = 6000, theta = exp(mean(x)))
exp <- function(x) exp(mean(x))
bcanon(x = x, nboot = 6000, theta = exp)
exp
bcanon(x = x, nboot = 6000, theta = exp(mean()))
bcanon(x = x, nboot = 6000, theta = exp)
exp1 <- function(x) exp(mean(x))
bcanon(x = x, nboot = 6000, theta = exp1)
?bcanon
theta <- function(x){exp(mean(x))}
bcanon(x, nboot = 6000, theta)
theta <- function(x){mean(x)}
bcanon(x, nboot = 6000, theta)
theta <- function(x){exp(mean(x))}
bcanon(1:10, nboot = 6000, theta,x)
bcanon(1:10, nboot = 6000, theta)
bcanon(1:10, nboot = 6000, theta,x)
bcanon( nboot = 6000, theta,x)
bcanon(x, nboot = 6000, theta)
bcanon(x, 6000, theta)
theta <- function(b){exp(mean(b))}
bcanon(x, 6000, theta)
exp(mean(x)
exp(mean(x))
exp(mean(x))
x
exp(mean(x))
exp(.5)
bootSim <- function(){
x_boot <- sample(x, size = 10, replace = TRUE)
exp(mean(x_boot))
}
boot_sim <- rdply(6000, bootSim)
round(quantile(boot_sim$V1, prob = 0.95), 2)
boot_sim <- rdply(6000, bootSim)
library(ggplot2)
xy  <-  data.frame(x=0:12, y = seq(0,1,lenth.out=13))
xy  <-  data.frame(x=0:12, y = seq(0,1,length.out=13))
ggplot(xy, aes(x=x, y=y)) +
stat_function(fun = dgama,args=list(shape=1), color="orange")
ggplot(xy, aes(x=x, y=y)) +
stat_function(fun = dgamma,args=list(shape=1), color="orange")
ggplot(xy, aes(x=x, y=y)) +
stat_function(fun = dgamma,args=list(shape=.1), color="orange")
ggplot(xy, aes(x=x, y=y)) +
stat_function(fun = dgamma,args=list(shape=.5), color="orange")
ggplot(xy, aes(x=x, y=y)) +
stat_function(fun = dgamma,args=list(rate=.5, shape=2), color="orange")
ggplot(xy, aes(x=x, y=y)) +
stat_function(fun = dgamma,args=list(rate=.1, shape=2), color="orange")
xy  <-  data.frame(x=0:12, y = seq(0,1,length.out=13))
ggplot(xy, aes(x=x, y=y)) +
stat_function(fun = dgamma,args=list(rate=.1, shape=4), color="orange")
ggplot(xy, aes(x=x, y=y)) +
stat_function(fun = dgamma,args=list(rate=.1, shape=1), color="orange")
ggplot(xy, aes(x=x, y=y)) +
stat_function(fun = dgamma,args=list(rate=.1, shape=3), color="orange")
ggplot(xy, aes(x=x, y=y)) +
stat_function(fun = dgamma,args=list(rate=.1, shape=2), color="orange")
xy  <-  data.frame(x=0:1, y = 0:1)
ggplot(xy, aes(x=x, y=y)) +
stat_function(fun = dbeta, args=list(shape1=.1, shape2=.1), color="orange")
$P(L|A) =$ $\frac{0.0955}{0.138}$ = $0.692$ = 69.2%
$P(L|A) =$ 0.692   =  69.2%
setwd("~/itam-dm/alumnos/jtmancilla/german")
source("0-load")
source("0-load.r")
source("2-eda.r")
german.data  <- load()
summary(german.data)
str(german.data)
View(german.data)
eda1(german.data)
eda1(german.data,4)
eda2(german.data,21,4)
na_german <- as.data.frame(abs(is.na(german.data)))
sort(colSums(na_german.data),decreasing=T)
sort(colSums(na_german),decreasing=T)
sort(colMeans(na_german*100),decreasing=T)
y <- na_german[which(sapply(na_german, sd) > 0)]
# Da la correación un valor alto positivo significa que desaparecen juntas.
cor(y)
corrgram(y, order=TRUE, lower.panel=panel.shade,
upper.panel=panel.pie, text.panel=panel.txt,
main="Datos numéricos sin NA`s de algas.data")
library(corrgram)
corrgram(y, order=TRUE, lower.panel=panel.shade,
upper.panel=panel.pie, text.panel=panel.txt,
main="Datos numéricos german")
corr(german.data)
cor(german.data)
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(stringr)
ds  <-  readRDS('german.rds') # Leemos el dataset, usando readRDS (ya que ya lo tenemos en disco debido a nuestro EDA)
ds <- tbl_df(ds) # Para obtener un print mejorado
ds
dim(ds)
str(ds)
summary(ds)
sapply(ds, class)
ds$duration.in.month  <- (ds$duration.in.month-mean(ds$duration.in.month,na.rm=T))/sd(ds$duration.in.month,na.rm=T)
ids.nas.count <- sapply(ds[vars], function(x) sum(is.na(x)))
vars <- names(ds) # Guardamos los nombres de variables
target <- "good.loan"  # Si el modelo es supervisado
#risk <- "" # Si se proveé, es la importancia de la observación respecto a la variable (es una variable de salida)
#costo <- "" # Costo de equivocarse en la predicción (Si se proveé) (es una variable de salida)
id <- names(ds) # Armar una id con columnas, o seleccionar el id del dataset
ids.nas.count <- sapply(ds[vars], function(x) sum(is.na(x)))
ids.nas <- names(which(ids.nas.count == nrow(ds)))
vars.a.ignorar <- union(ids.nas, vars.a.ignorar)
vars.a.ignorar <-ids.nas# union(ids.nas, vars.a.ignorar)
# Las que tengan muchos NAs (un 70% o más)
ids.many.nas <- names(which(ids.nas.count >= 0.7*nrow(ds)))
vars.a.ignorar <- union(ids.many.nas, vars.a.ignorar)
dim(ds)
ds <- ds[!is.na(ds[target]),]
dim(ds)
ds[target] <- as.factor(ds[[target]])
table(ds[target])
ggplot(data=ds, aes_string(x=target)) + geom_bar(width=0.3)
vars.cor <- cor(ds[which(sapply(ds, is.numeric))], use="complete.obs")
vars.cor[upper.tri(vars.cor, diag=TRUE)] <- NA
vars.cor <- vars.cor                                  %>%
abs()                                     %>%
data.frame()                              %>%
mutate(var1=row.names(vars.cor))          %>%
gather(var2, cor, -var1)                  %>%
na.omit()
vars.cor <- vars.cor[order(-abs(vars.cor$cor)), ]
(muy.cor <- filter(vars.cor, cor > 0.95)) # Mostramos las que tengan más del 95% de correlación
# Habría que decidir si se remueven y cuales se remueven (var1 o var2)
vars.a.ignorar <- union(vars.a.ignorar, muy.cor$var2)
(vars.input <- setdiff(vars, target))
idxs.input <- sapply(vars.input, function(x) which(x == names(ds)), USE.NAMES=FALSE)
idxs.numericas <- intersect(idxs.input, which(sapply(ds, is.numeric)))
(vars.numericas <- names(ds)[idxs.numericas])
idxs.categoricas <- intersect(idxs.input, which(sapply(ds, is.factor)))
(vars.categoricas <- names(ds)[idxs.categoricas])
num.observaciones <- nrow(ds)
source("0-load.r")
source("2-eda.r")
german.data  <- load()
eda1(german.data,c(3,9,5,11,16))
eda2(german.data,21,c(1,6,11,9,6))
setwd("~/data-mining-test/nosomosmuchosperosomosmachos")
eda2(algas.data,2,c(1,6,11,9,6))
